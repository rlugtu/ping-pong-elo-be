// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id          String  @id // not autogenerated, provided by OAuth upon User Creation
    accessToken String
    email       String
    firstName   String
    lastName    String?
    department  String?

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    teams UserTeams[]

    @@unique([id, accessToken, email])
}

model Elo {
    id  String @id @default(cuid())
    elo Int

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId String
}

model UserTeams {
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId String

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    @@id(name: "id", [userId, teamId])
}

model Team {
    id                        String      @id @default(cuid())
    completedSeasonPlacements Boolean     @default(false)
    score                     TeamScore[]
    users                     UserTeams[]

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    teamA Match[] @relation("teamA")

    teamB Match[] @relation("teamB")

    eloHistory Elo[]
}

model TeamScore {
    id           String  @id @default(cuid())
    score        Int
    isFinalScore Boolean @default(false)

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId String

    match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
    matchId String

    @@unique(name: "teamIdMatchId", [teamId, matchId])
}

enum MatchMode {
    SINGLES
    DOUBLES
}

enum MatchState {
    SETUP
    IN_PROGRESS
    COMPLETED
}

model Match {
    id            String     @id @default(cuid())
    state         MatchState @default(SETUP)
    winningScore  Int
    mode          MatchMode
    winningTeamId String?

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    teamA      Team        @relation(fields: [teamAId], references: [id], name: "teamA")
    teamAId    String
    teamB      Team?       @relation(fields: [teamBId], references: [id], name: "teamB")
    teamBId    String?
    teamScores TeamScore[]
    season     Season      @relation(fields: [seasonId], references: [id])
    seasonId   String
}

model Season {
    id   String @id @default(cuid())
    name String

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    matches Match[]
}
