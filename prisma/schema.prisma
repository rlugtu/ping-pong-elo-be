// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id   String @unique // not autogenerated, provided by OAuth upon User Creation
    email String  @unique
    firstName String
    lastName  String?
    department String?
    accessToken String
    currentElo Int @default(1400)

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    // relations
    eloHistory Elo[]    
    teams UserTeams[]  
}

model Elo {
    id String @id @default(cuid())
    elo Int

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    
    // relations
    user User @relation(fields: [userId], references: [id])
    userId String
}

model UserTeams {
    user User @relation(fields: [userId], references: [id])
    userId String 

    team Team @relation(fields: [teamId], references: [id])
    teamId String 
    
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime @updatedAt @db.Timestamptz(6)   
    
    @@id(name: "id", [userId, teamId])
}


model Team {
    id String @id @default(cuid())
    score TeamScore[]
    users UserTeams[]

    createdAt   DateTime @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime @updatedAt @db.Timestamptz(6)

    // relations
    teamA Match[] @relation("teamA")
    teamB Match[] @relation("teamB")
}


model TeamScore {
    id String @id @default(cuid())
    score Int

    createdAt   DateTime @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime @updatedAt @db.Timestamptz(6)

    // relations
    team Team @relation(fields: [teamId], references: [id])
    teamId String @unique
    
    match Match @relation(fields: [matchId], references: [id])
    matchId String
}


enum MatchState {
    SETUP
    IN_PROGRESS
    COMPLETED
}

model Match {
    id String @id @default(cuid())
    state MatchState @default(SETUP)
    winningScore Int

    createdAt   DateTime @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime @updatedAt @db.Timestamptz(6)   

    // relations
    teamA Team @relation(fields: [teamAId], references: [id],  name: "teamA") 
    teamAId String 
    teamB Team? @relation(fields: [teamBId], references: [id],  name: "teamB")
    teamBId String ?
    teamScores TeamScore[]
}
